#!/bin/bash

## Tiny bash wrapper to manage a locally-installed
## prometheus service, with all needed configuration
## options handled automatically in-script.

############################################################
## YOUR VALUES ##
#################

# Your user home directory, used as basis for other file paths:
USR="/Users/myuser"

# Prometheus-specific configuration options:
PROMBIN="$USR/bin/prometheus"
PROMCONF="$USR/etc/prometheus/prometheus.yml"
PROMLIB="$USR/lib/prometheus/data"
PROMLOG="$USR/log/prometheus/prometheus.log"
PROMWEB="localhost:9090"

############################################################
## BEGIN SCRIPT ##
##################

## Check for provided parameter:
PARAMETER=$1

# Parse user-provided parameter and determine what to do:
if [ -z $PARAMETER ]; then
   echo -e "\nERROR: No parameter provided. You must provide one of:"
   echo -e "     - start: start the local promethus service"
   echo -e "     - stop: stop the local prometheus service"
   echo -e "     - restart: restart the local prometheus service"
   echo -e "     - status: check the status of the local prometheus service"
   echo -e "     - web: launch the running prometheus web interface"
   echo -e "     - log: read the current prometheus log"
   echo -e "       Exiting ...\n"
   exit;
elif [ ! -z $2 ]; then
   echo -e "\nERROR: Too many parameters provided. You must provide one of:"
   echo -e "     - start: start the local promethus service"
   echo -e "     - stop: stop the local prometheus service"
   echo -e "     - restart: restart the local prometheus service"
   echo -e "     - status: check the status of the local prometheus service"
   echo -e "     - web: launch the running prometheus web interface"
   echo -e "     - log: read the current prometheus log"
   echo -e "       Exiting ...\n"
   exit;
elif [[ "$PARAMETER" =~ ^(start|START|Start)$ ]]; then
   START=1
elif [[ "$PARAMETER" =~ ^(stop|STOP|Stop)$ ]]; then
   STOP=1
elif [[ "$PARAMETER" =~ ^(restart|RESTART|Restart)$ ]]; then
   RESTART=1
elif [[ "$PARAMETER" =~ ^(status|STATUS|Status|check|CHECK|Check)$ ]]; then
   STATUS=1
elif [[ "$PARAMETER" =~ ^(web|WEB|Web)$ ]]; then
   WEB=1
elif [[ "$PARAMETER" =~ ^(log|LOG|Log)$ ]]; then
   LOG=1
else
   echo -e "\nERROR: Unable to parse input. You must provide one of:"
   echo -e "     - start: start the local promethus service"
   echo -e "     - stop: stop the local prometheus service"
   echo -e "     - restart: restart the local prometheus service"
   echo -e "     - status: check the status of the local prometheus service"
   echo -e "     - web: launch the running prometheus web interface"
   echo -e "     - log: read the current prometheus log"
   echo -e "       Exiting ...\n"
   exit;
fi

## Gather data on currently-running prometheus instance, if any:
PROMPROC=`ps aux | grep -i prometheus | grep -v grep`
PROMPROCCOUNT=`echo $PROMPROC | grep -c 'storage.tsdb.path'`
PROMPROCPID=`echo $PROMPROC | awk '{print $2}'`

# Perform requested task:
if [ $START ]; then
   if [ `echo $PROMPROCCOUNT` -gt 0 ]; then
      echo -e "\nERROR: Prometheus service already running:\n"
      echo -e $PROMPROC
      echo ""
   else
      echo -e "\nStarting Prometheus ..."
      $PROMBIN --config.file=$PROMCONF --storage.tsdb.path=$PROMLIB --web.listen-address="$PROMWEB" 2> $PROMLOG &
      sleep 2
      tail -1 $PROMLOG
      echo ""
   fi
elif [ $STOP ]; then
   if [ `echo $PROMPROCCOUNT` -lt 1 ]; then
      echo -e "\nPrometheus service not running\n"
   else
      echo -e "\nStopping Prometheus ..."
      kill $PROMPROCPID > /dev/null 2>&1
      echo ""
      echo "   ... done!"
      echo ""
   fi
elif [ $RESTART ]; then
   echo -e "\nRestarting Prometheus ..."
   kill $PROMPROCPID > /dev/null 2>&1
   sleep 1
   $PROMBIN --config.file=$PROMCONF --storage.tsdb.path=$PROMLIB --web.listen-address="$PROMWEB" 2> $PROMLOG &
   sleep 2
   tail -1 $PROMLOG
   echo ""
elif [ $STATUS ]; then
   if [ `echo $PROMPROCCOUNT` -lt 1 ]; then
      echo -e "\nPrometheus service not running\n"
   else
      echo ""
      echo $PROMPROC
      echo ""
   fi
elif [ $WEB ]; then
   open http://$PROMWEB
elif [ $LOG ]; then
   tail -100 $PROMLOG
   echo ""
else
   echo "ERROR: Not possible to get here"
fi

exit;
