#!/bin/bash

## For the specified legacy releases, consolidate standalone
## release notes into include files and manipulate text to
## fit new SEO-focused requirements.

############################################################
## YOUR VALUES ##
#################

## Bash array of versions to consolidate (beta will be treated
## the same as v1.0 later in script, but needs to be here to
## be found in releases/):
RNS_TO_MERGE=(beta v1.0 v1.1 v2.0 v2.1 v19.1 v19.2 v20.1)

############################################################
## BEGIN SCRIPT ##
##################

## Tempspace to stage in-progress changes before copying completed files:
TMPSPACE=/tmp/consolidate_rns_$$

## Exit if not in a valid git repo:
GITROOT=`git rev-parse --show-toplevel 2>&1`
if [ `echo $GITROOT | grep -c '^fatal: not a git repository'` -gt 0 ]; then
   echo -e "\nERROR: Not in a git repo!"
   echo -e "       You must run this program from within the docs directory.\n"
   exit;
fi

## Make temp _includes/releases/beta dir to house beta-*.md release notes
## temporarily until we later move them:
mkdir -p _includes/releases/beta

# Bash field separator:
IFS="
"

## Loop over versions to consolidate:
for RN in "${RNS_TO_MERGE[@]}"; do

    echo "Now processing $RN ..."

    ## Loop over release notes files beginning with $RN:
    for RN_PATH in `ls releases/$RN*.md | grep -v $RN.md`; do
        RN_FILENAME=`echo $RN_PATH | awk -F '/' '{print $2}'`
        RN_VERSION=`echo $RN_FILENAME | sed 's%.md%%g'`

        ## Copy matching filename to new include location:
        mv $RN_PATH _includes/releases/$RN/

        ## Perform needed adjustments to each copied file, by editing in place
        ## in TMPSPACE, writing to numbered stage files for ease of following along!
        ## Simply comment out the rm at the end of this script to inspect what
        ## each numbered step accomplishes!

        ## 1. Remove all YAML front matter (and leading blank newlines):
        ##    This sed invocation fires only on '---' detected at line 1, and deletes
        ##    all lines up to and including the next-detected '---' line. The second
        ##    sed just strips any leading blank newlines.
        sed '1{/^---$/!q;};1,/^---$/d' _includes/releases/$RN/$RN_FILENAME | sed '/./,$!d' > $TMPSPACE.1

        ## 2. Remove date header line (and leading blank newlines):
        ##    This sed invocation deletes headers that contain a specific, expected
        ##    date format of '## MMM DD YYYY'. Some dates include full month names, so
        ##    we must use a range for the letter matching of abbr length (3) through
        ##    longest month length (sept: 9). The second sed just strips any leading
        ##    blank newlines. 
        sed -E 's/^## [a-zA-Z]{3,9} [0-9]{1,2}, [0-9]{4}$//g' $TMPSPACE.1 | sed '/./,$!d' > $TMPSPACE.2

        ## 3. Insert $DATE_VERS_LIQUID as first line:
        ##    This inserts (i\) specific desired liquid syntax as line one (the leading 1).
        ##    On BSD (macOS), we must do this terrible thing where we escape explicit newlines
        ##    (the \ then return key at the end of each line) in order to capture this in sed.
        ##    I know, it's real ugly!
        sed '1 i\
<h2 id="{{ include.release | slugify }}">{{ include.release }}</h2>\
\
Release Date: {{ include.release_date | date: "%B %-d, %Y" }}\

' $TMPSPACE.2 > $TMPSPACE.3

        ## 4. Remove marketing email signup (and leading blank newlines):
        ##    Similar to step 1, we remove all lines between and including the specified text
        ##    strings. The second sed just strips any leading blank newlines.
        sed '/^Get future release notes emailed to you:$/,/^{% include marketo.html %}$/d' $TMPSPACE.3  | sed '/./,$!d' > $TMPSPACE.4

        ## 5. Convert all MD headers into HTML headers with specific tweaks:
        ##    We must do this in a while read loop because a for loop, with IFS=newline cannot
        ##    handle blank lines with any granularity.
        cat $TMPSPACE.4 | while read LINE; do
            ## If the line we stumble on is a header ...
            if [ `echo $LINE | egrep -c '^#{2,3}'` -gt 0 ]; then
                ## ... Determine the header title (by stripping the leading ##s, some are 2 some are 3):
                TITLE=`echo $LINE | sed 's%^#* %%g'`
                ## ... Slugify the header title with this amazing oneliner from:
                ##     https://gist.github.com/oneohthree/f528c7ae1e701ad990e6
                TITLE_SLUG=`echo $TITLE | iconv -t ascii//TRANSLIT | sed -E s/[^a-zA-Z0-9]+/-/g | sed -E s/^-+\|-+$//g | tr A-Z a-z`
                ## ... Then write the adjusted header to the staging file instead:
                echo "<h3 id=\"$RN_VERSION-$TITLE_SLUG\">$TITLE</h3>" >> $TMPSPACE.5
            ## If the line we stumble in is not a header, just print it as is to the staging file:
            else
                echo $LINE >> $TMPSPACE.5
            fi
        done

        ## 6. Remove any double-newlines (some are created when removing marketing email bit, for example):
        sed 'N;/^\n$/D;P;D;' $TMPSPACE.5 > $TMPSPACE.6

        ## 7. Move refactored RN to new location:
        mv $TMPSPACE.6 _includes/releases/$RN/$RN_FILENAME

    done
done

## Move beta MD files into v1.0 dir and remove beta dir:
mv _includes/releases/beta/*.md _includes/releases/v1.0/
rmdir _includes/releases/beta

## Comment this out if you wanna go through the staging files for each step to follow along
## after running this script!
rm -rf $TMPSPACE.*

exit;
